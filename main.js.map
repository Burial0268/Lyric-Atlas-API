{"version":3,"sources":["src/index.ts"],"names":["fastify","ALLOWED_FORMATS","DEFAULT_FALLBACK_ORDER","isValidFormat","format","includes","buildRawUrl","id","sanitizedId","encodeURIComponent","baseUrl","EXTERNAL_API_BASE_URL","process","env","EXTERNAL_NCM_API_URL","buildExternalApiUrl","Error","server","logger","get","request","reply","fallback","fallbackQuery","fixedVersion","fixedVersionRaw","query","fixedVersionQuery","toLowerCase","code","send","error","log","info","result","fetchRepoLyric","status","found","source","content","statusCode","message","ttmlResult","fallbackOrder","split","map","f","trim","filter","length","warn","join","fallbackFormat","fallbackResult","toUpperCase","externalUrl","externalResponse","fetch","ok","externalData","json","parseError","yrc","lyric","lrc","externalFetchError","errorMessage","msg","url","response","text","err","start","console","exit","port","parseInt","PORT","listen","host","handler","req","res","ready","emit","VERCEL"],"mappings":"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","file":"main.js","sourcesContent":["import fastify, { FastifyRequest, FastifyReply } from 'fastify';\r\n\r\n// Define interface for query parameters for better type safety\r\ninterface SearchQuery {\r\n  id?: string;\r\n  fallback?: string;\r\n  fixedVersion?: string;\r\n}\r\n\r\n// --- Allowed Formats & Helper ---\r\ntype LyricFormat = 'ttml' | 'yrc' | 'lrc' | 'eslrc';\r\nconst ALLOWED_FORMATS: LyricFormat[] = ['ttml', 'yrc', 'lrc', 'eslrc'];\r\n// Default *fallback* order, excluding ttml initially\r\nconst DEFAULT_FALLBACK_ORDER: LyricFormat[] = ['yrc', 'lrc', 'eslrc'];\r\n\r\nconst isValidFormat = (format: string | undefined | null): format is LyricFormat => {\r\n  if (!format) return false;\r\n  return ALLOWED_FORMATS.includes(format as LyricFormat);\r\n};\r\n\r\nconst buildRawUrl = (id: string, format: LyricFormat): string => {\r\n  const sanitizedId = encodeURIComponent(id);\r\n  const baseUrl = 'https://raw.githubusercontent.com/Steve-XMH/amll-ttml-db/main/ncm-lyrics/';\r\n  return `${baseUrl}${sanitizedId}.${format}`;\r\n};\r\n\r\n// --- Read External API URL from Environment Variable ---\r\nconst EXTERNAL_API_BASE_URL = process.env.EXTERNAL_NCM_API_URL;\r\n\r\n// buildExternalApiUrl now relies on EXTERNAL_API_BASE_URL being set\r\nconst buildExternalApiUrl = (id: string): string => {\r\n    if (!EXTERNAL_API_BASE_URL) {\r\n        // This case should ideally be prevented by the startup check\r\n        throw new Error(\"External API base URL is not configured.\");\r\n    }\r\n    return `${EXTERNAL_API_BASE_URL}?id=${encodeURIComponent(id)}`;\r\n}\r\n\r\n// Define result types for promises\r\ntype FetchResult =\r\n  | { status: 'found'; format: LyricFormat; content: string }\r\n  | { status: 'notfound'; format: LyricFormat }\r\n  | { status: 'error'; format: LyricFormat; statusCode?: number; error: Error };\r\n\r\n// --- Fastify Server Instance ---\r\n// Enable logger for development\r\nconst server = fastify({ logger: true });\r\n\r\n// --- API Endpoint ---\r\n// Register route with query parameter typing\r\nserver.get<{ Querystring: SearchQuery }>('/api/search', async (request: FastifyRequest<{ Querystring: SearchQuery }>, reply: FastifyReply) => {\r\n  const { id, fallback: fallbackQuery, fixedVersion: fixedVersionRaw } = request.query;\r\n  const fixedVersionQuery = fixedVersionRaw?.toLowerCase();\r\n\r\n  if (!id) {\r\n    // Use Fastify's reply object to send response with status code\r\n    return reply.code(400).send({ error: 'Missing id parameter' });\r\n  }\r\n\r\n  server.log.info(`Processing request for ID: ${id}, fixed: ${fixedVersionQuery}, fallback: ${fallbackQuery}`);\r\n\r\n  try {\r\n    // --- Handle fixedVersion (fetches only from repo) ---\r\n    if (isValidFormat(fixedVersionQuery)) {\r\n      server.log.info(`Handling fixedVersion request for format: ${fixedVersionQuery}`);\r\n      const result = await fetchRepoLyric(id, fixedVersionQuery); // Use repo fetcher\r\n      if (result.status === 'found') {\r\n        return reply.send({ found: true, id, format: result.format, source: 'repository', content: result.content });\r\n      } else if (result.status === 'notfound') {\r\n        return reply.code(404).send({ found: false, id, error: `Lyrics not found for fixed format: ${fixedVersionQuery}` });\r\n      } else { // status === 'error'\r\n        const statusCode = result.statusCode && result.statusCode >= 500 ? 502 : 500;\r\n        return reply.code(statusCode).send({ error: `Failed to fetch fixed format ${fixedVersionQuery}: ${result.error.message}` });\r\n      }\r\n    }\r\n\r\n    // --- Handle TTML first (from repo) ---\r\n    server.log.info(`Attempting primary format: TTML from repository`);\r\n    const ttmlResult = await fetchRepoLyric(id, 'ttml');\r\n\r\n    if (ttmlResult.status === 'found') {\r\n      server.log.info(`Primary format TTML found in repository for ID: ${id}. Returning.`);\r\n      return reply.send({ found: true, id, format: ttmlResult.format, source: 'repository', content: ttmlResult.content });\r\n    }\r\n\r\n    if (ttmlResult.status === 'error') {\r\n      server.log.error(`Error fetching primary format TTML from repository. Failing request. Error: ${ttmlResult.error.message}`);\r\n      const statusCode = ttmlResult.statusCode && ttmlResult.statusCode >= 500 ? 502 : 500;\r\n      return reply.code(statusCode).send({ error: `Failed to fetch primary format TTML: ${ttmlResult.error.message}` });\r\n    }\r\n\r\n    // --- TTML was 'notfound' in repo, proceed to repo fallbacks ---\r\n    server.log.info(`Primary format TTML not found (404) in repository. Proceeding to repository fallbacks.`);\r\n\r\n    let fallbackOrder: LyricFormat[];\r\n    if (fallbackQuery) {\r\n      fallbackOrder = fallbackQuery.split(',').map((f: string) => f.trim().toLowerCase()).filter((f): f is LyricFormat => isValidFormat(f) && f !== 'ttml');\r\n      if (fallbackOrder.length === 0 && fallbackQuery.split(',').length > 0) {\r\n        server.log.warn(`Fallback query provided (\"${fallbackQuery}\") but resulted in no valid fallback formats after filtering.`);\r\n      }\r\n    } else {\r\n      fallbackOrder = DEFAULT_FALLBACK_ORDER;\r\n    }\r\n\r\n    server.log.info(`Checking repository fallback formats in order: ${fallbackOrder.join(', ') || 'None'}`);\r\n\r\n    for (const fallbackFormat of fallbackOrder) {\r\n      const fallbackResult = await fetchRepoLyric(id, fallbackFormat); // Use repo fetcher\r\n      if (fallbackResult.status === 'found') {\r\n        server.log.info(`Repository fallback format ${fallbackFormat.toUpperCase()} found for ID: ${id}. Returning.`);\r\n        return reply.send({ found: true, id, format: fallbackResult.format, source: 'repository', content: fallbackResult.content });\r\n      }\r\n      if (fallbackResult.status === 'error') {\r\n        server.log.error(`Error fetching repository fallback format ${fallbackFormat.toUpperCase()}. Failing request. Error: ${fallbackResult.error.message}`);\r\n        const statusCode = fallbackResult.statusCode && fallbackResult.statusCode >= 500 ? 502 : 500;\r\n        return reply.code(statusCode).send({ error: `Failed to fetch repository fallback format ${fallbackFormat.toUpperCase()}: ${fallbackResult.error.message}` });\r\n      }\r\n      server.log.info(`Repository fallback format ${fallbackFormat.toUpperCase()} not found (404). Continuing.`);\r\n    }\r\n\r\n    // --- All repository checks failed (404), proceed to External API Fallback ---\r\n    server.log.info(`No lyrics found in repository for ID: ${id}. Trying external API fallback.`);\r\n    const externalUrl = buildExternalApiUrl(id);\r\n\r\n    try {\r\n      const externalResponse = await fetch(externalUrl);\r\n      if (!externalResponse.ok) {\r\n        server.log.error(`External API fetch failed with status: ${externalResponse.status} for URL: ${externalUrl}`);\r\n        return reply.code(502).send({ found: false, id, error: `External API fallback failed with status ${externalResponse.status}` });\r\n      }\r\n\r\n      // Try parsing JSON\r\n      let externalData;\r\n      try {\r\n        externalData = await externalResponse.json() as any; // Use 'as any' for simplicity or define a proper type\r\n      } catch (parseError) {\r\n        server.log.error(`Failed to parse JSON from external API fallback for ID: ${id}`, parseError);\r\n        return reply.code(502).send({ found: false, id, error: 'External API fallback returned invalid JSON.' });\r\n      }\r\n\r\n      // Check for YRC lyric\r\n      if (externalData?.yrc?.lyric) {\r\n        server.log.info(`Found YRC lyrics in external API fallback for ID: ${id}. Returning.`);\r\n        return reply.send({ found: true, id, format: 'yrc', source: 'external', content: externalData.yrc.lyric });\r\n      }\r\n\r\n      // Check for LRC lyric if YRC not found\r\n      if (externalData?.lrc?.lyric) {\r\n        server.log.info(`Found LRC lyrics in external API fallback for ID: ${id}. Returning.`);\r\n        return reply.send({ found: true, id, format: 'lrc', source: 'external', content: externalData.lrc.lyric });\r\n      }\r\n\r\n      // If neither YRC nor LRC found in external API response\r\n      server.log.info(`No usable lyrics (YRC/LRC) found in external API response for ID: ${id}.`);\r\n      return reply.code(404).send({ found: false, id, error: 'Lyrics not found in repository or external API' });\r\n\r\n    } catch (externalFetchError) {\r\n      server.log.error(`Network error during external API fallback fetch for ID: ${id}`, externalFetchError);\r\n      const errorMessage = externalFetchError instanceof Error ? externalFetchError.message : 'Unknown external fetch error';\r\n      return reply.code(502).send({ found: false, id, error: `External API fallback failed: ${errorMessage}` });\r\n    }\r\n\r\n  } catch (error) {\r\n    // Catch unexpected errors during the overall process\r\n    server.log.error({ msg: `Unexpected error during handler execution for ID: ${id}`, error });\r\n    const errorMessage = error instanceof Error ? error.message : 'Unknown processing error';\r\n    return reply.code(500).send({ error: `Failed to process lyric request: ${errorMessage}` });\r\n  }\r\n});\r\n\r\n// Helper function to fetch from GitHub Repo\r\nasync function fetchRepoLyric(id: string, format: LyricFormat): Promise<FetchResult> {\r\n  const url = buildRawUrl(id, format);\r\n  server.log.info(`Attempting fetch from GitHub repo for ${format.toUpperCase()}: ${url}`);\r\n  try {\r\n    const response = await fetch(url);\r\n    if (response.ok) {\r\n      const content = await response.text();\r\n      server.log.info(`Repo fetch success for ${format.toUpperCase()} (status: ${response.status})`);\r\n      return { status: 'found', format, content };\r\n    } else if (response.status === 404) {\r\n      server.log.info(`Repo fetch resulted in 404 for ${format.toUpperCase()}`);\r\n      return { status: 'notfound', format };\r\n    } else {\r\n      server.log.error(`Repo fetch failed for ${format.toUpperCase()} with HTTP status ${response.status}`);\r\n      return { status: 'error', format, statusCode: response.status, error: new Error(`HTTP error ${response.status}`) };\r\n    }\r\n  } catch (err) {\r\n    server.log.error(`Network error during repo fetch for ${format.toUpperCase()}`, err);\r\n    const error = err instanceof Error ? err : new Error('Unknown fetch error');\r\n    return { status: 'error', format, error };\r\n  }\r\n}\r\n\r\n// --- Server Startup Logic ---\r\nconst start = async () => {\r\n  // --- CHECK REQUIRED ENV VARS ---\r\n  if (!EXTERNAL_API_BASE_URL) {\r\n    console.error(\"FATAL ERROR: Required environment variable EXTERNAL_NCM_API_URL is not set.\");\r\n    process.exit(1); // Exit if required config is missing\r\n  }\r\n  console.log(`Using external API URL: ${EXTERNAL_API_BASE_URL}`); // Log after confirmation\r\n\r\n  const port = parseInt(process.env.PORT || '3000', 10);\r\n  try {\r\n    await server.listen({ port: port, host: '0.0.0.0' });\r\n    // Logger will automatically print the address\r\n  } catch (err) {\r\n    server.log.error(err);\r\n    process.exit(1);\r\n  }\r\n};\r\n\r\n// Vercel 自动注入 VERCEL 环境变量，若存在则导出 handler 供无服务器函数使用，否则本地/传统环境直接监听端口。\r\n\r\nexport default async function handler(req: any, res: any) {\r\n  // 确保 Fastify 实例已就绪\r\n  await server.ready();\r\n  // 复用 Fastify 内部的 Node 原生服务器处理请求\r\n  server.server.emit('request', req, res);\r\n}\r\n\r\nif (!process.env.VERCEL) {\r\n  // 非 Vercel 环境（本地开发或其他平台）正常启动监听端口\r\n  start();\r\n}\r\n"]}